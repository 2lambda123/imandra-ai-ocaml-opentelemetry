(library
 (name opentelemetry)
 (synopsis "API for opentelemetry instrumentation")
 (flags :standard -warn-error -a+8)
 (libraries ambient-context ptime ptime.clock.os pbrt threads opentelemetry.atomic)
 (public_name opentelemetry))

; ### protobuf rules ###

(rule
 (alias lint)
 (mode fallback)
 (targets status_types.ml status_types.mli status_pb.ml status_pb.mli
   status_pp.ml status_pp.mli)
 (deps
  (:file status.proto)
  (source_tree %{project_root}/vendor/opentelemetry-proto/))
 (action
  (run ocaml-protoc %{file} -ml_out . -pp -binary)))

(rule
 (alias lint)
 (mode fallback)
 (targets common_types.ml common_types.mli common_pb.ml common_pb.mli
   common_pp.ml common_pp.mli)
 (deps
  (:file
    %{project_root}/vendor/opentelemetry-proto/opentelemetry/proto/common/v1/common.proto)
  (source_tree %{project_root}/vendor/opentelemetry-proto/))
 (action
  (run ocaml-protoc %{file} -I %{project_root}/vendor/opentelemetry-proto/
    -ml_out . -pp -binary)))

(rule
 (alias lint)
 (mode fallback)
 (targets resource_types.ml resource_types.mli resource_pb.ml resource_pb.mli
   resource_pp.ml resource_pp.mli)
 (deps
  (:file
    %{project_root}/vendor/opentelemetry-proto/opentelemetry/proto/resource/v1/resource.proto)
  (source_tree %{project_root}/vendor/opentelemetry-proto/))
 (action
  (run ocaml-protoc %{file} -I %{project_root}/vendor/opentelemetry-proto/
    -ml_out . -pp -binary)))

(rule
 (alias lint)
 (mode fallback)
 (targets trace_types.ml trace_types.mli trace_pb.ml trace_pb.mli trace_pp.ml
   trace_pp.mli)
 (deps
  (:file
    %{project_root}/vendor/opentelemetry-proto/opentelemetry/proto/trace/v1/trace.proto)
  (source_tree %{project_root}/vendor/opentelemetry-proto/))
 (action
  (run ocaml-protoc %{file} -I %{project_root}/vendor/opentelemetry-proto/
    -ml_out . -pp -binary)))

(rule
 (alias lint)
 (mode fallback)
 (targets metrics_types.ml metrics_types.mli metrics_pb.ml metrics_pb.mli
   metrics_pp.ml metrics_pp.mli)
 (deps
  (:file
    %{project_root}/vendor/opentelemetry-proto/opentelemetry/proto/metrics/v1/metrics.proto)
  (source_tree %{project_root}/vendor/opentelemetry-proto/))
 (action
  (run ocaml-protoc %{file} -I %{project_root}/vendor/opentelemetry-proto/
    -ml_out . -pp -binary)))

(rule
 (alias lint)
 (mode fallback)
 (targets logs_types.ml logs_types.mli logs_pb.ml logs_pb.mli logs_pp.ml
   logs_pp.mli)
 (deps
  (:file
    %{project_root}/vendor/opentelemetry-proto/opentelemetry/proto/logs/v1/logs.proto)
  (source_tree %{project_root}/vendor/opentelemetry-proto/))
 (action
  (run ocaml-protoc %{file} -I %{project_root}/vendor/opentelemetry-proto/
    -ml_out . -pp -binary)))

(rule
 (alias lint)
 (mode fallback)
 (targets metrics_service_types.ml metrics_service_types.mli
   metrics_service_pp.ml metrics_service_pp.mli metrics_service_pb.ml
   metrics_service_pb.mli)
 (deps
  (:file
    %{project_root}/vendor/opentelemetry-proto/opentelemetry/proto/collector/metrics/v1/metrics_service.proto)
  (source_tree %{project_root}/vendor/opentelemetry-proto/))
 (action
  (run ocaml-protoc %{file} -I %{project_root}/vendor/opentelemetry-proto/
    -ml_out . -pp -binary)))

(rule
 (alias lint)
 (mode fallback)
 (targets trace_service_types.ml trace_service_types.mli trace_service_pp.ml
   trace_service_pp.mli trace_service_pb.ml trace_service_pb.mli)
 (deps
  (:file
    %{project_root}/vendor/opentelemetry-proto/opentelemetry/proto/collector/trace/v1/trace_service.proto)
  (source_tree %{project_root}/vendor/opentelemetry-proto/))
 (action
  (run ocaml-protoc %{file} -I %{project_root}/vendor/opentelemetry-proto/
    -ml_out . -pp -binary)))

(rule
 (alias lint)
 (mode fallback)
 (targets logs_service_types.ml logs_service_types.mli logs_service_pp.ml
   logs_service_pp.mli logs_service_pb.ml logs_service_pb.mli)
 (deps
  (:file
    %{project_root}/vendor/opentelemetry-proto/opentelemetry/proto/collector/logs/v1/logs_service.proto)
  (source_tree %{project_root}/vendor/opentelemetry-proto/))
 (action
  (run ocaml-protoc %{file} -I %{project_root}/vendor/opentelemetry-proto/
    -ml_out . -pp -binary)))
